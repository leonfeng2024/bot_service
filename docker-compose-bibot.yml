# docker network create bibot
# docker compose -f docker-compose-bibot.yml up -d --build
# docker compose -f docker-compose-bibot.yml down

networks:
  bibot:
    external: true

services:
  bibot_opensearch:
    container_name: bibot_opensearch
    image: 'opensearchproject/opensearch:latest'
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - 'discovery.type=single-node'
      - 'plugins.security.disabled=true'
      - 'OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m'
      - 'OPENSEARCH_INITIAL_ADMIN_PASSWORD=Leonfeng@2025'
      - 'OPENSEARCH_INITIAL_ADMIN_USERNAME=admin'
    networks:
      - bibot
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    deploy:
      resources:
        limits:
          memory: 2G

  bibot_redis:
    container_name: bibot_redis
    image: 'redis:latest'
    ports:
      - "6379:6379"
    command: redis-server --requirepass 12345678 --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - bibot
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M

  bibot_nginx:
    container_name: bibot_nginx
    image: nginx:alpine
    ports:
      - "8088:8088"
      - "443:443"
    networks:
      - bibot
    volumes:
      - ./nginx/nginx_local.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  bibot_postgres:
    image: postgres:latest
    container_name: bibot_postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Automation2025
      POSTGRES_DB: identity_management
    ports:
      - "5432:5432"
    networks:
      - bibot
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s 
      timeout: 5s 
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G 

  bibot_neo4j:  # 新增服务 
    container_name: bibot_neo4j 
    image: neo4j:latest
    ports:
      - "7474:7474"  # HTTP接口 
      - "7473:7473"  # HTTPS接口 
      - "7687:7687"  # Bolt协议端口 
    environment:
      - NEO4J_AUTH=neo4j/neo4j2025 
      - NEO4J_apoc_export_file_enabled=true 
      - NEO4J_apoc_import_file_enabled=true 
      - NEO4J_PLUGINS=apoc 
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
    networks:
      - bibot
    volumes:
      - neo4j_data:/data
    deploy:
      resources:
        limits:
          memory: 1.5G 

  bot_service:
    container_name: bot_service
    build:
      context: .
      dockerfile: Dockerfile_local
    ports:
      - "8000:8000"
    networks:
      - bibot
    depends_on:
      bibot_redis:
        condition: service_healthy
      bibot_postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://bot_service:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 5G

volumes:
  pg_data:
    name: pg_data
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
    name: postgres_data
  opensearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/opensearch
    name: opensearch_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
    name: redis_data
  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j
    name: neo4j_data
